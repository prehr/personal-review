{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }) // re-direct to login on successful register\n    .catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var getUser = function getUser(id) {\n  User.find({\n    points: {\n      $exists: true\n    }\n  }, function (err, docs) {\n    var count = 0;\n\n    for (var i = 0; i < docs.length; i++) {\n      count += docs[i].points;\n    }\n\n    console.log(\"The total of points is: \", count);\n  });\n}; //dont work\n// export const getUser = userData => dispatch => {\n//   axios\n//     .get(\"/api/users/:id\", userData)\n//     .then(res => console.log(res)) // re-direct to login on successful register\n//     .catch(err =>\n//       dispatch({\n//         type: GET_ERRORS,\n//         payload: err.response.data\n//       })\n//     );\n// };\n// Login - get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    console.log(userData);\n    axios.post(\"/api/users/login\", userData).then(function (res) {\n      // Save to localStorage\n      // Set token to localStorage\n      var token = res.data.token;\n      localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["K:\\School\\SoftEng\\review-me-simple\\client\\src\\actions\\authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","getUser","id","User","find","points","$exists","docs","count","i","length","console","log","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\nexport const getUser = id => {\r\n  User.find({ points: { $exists: true } }, function(err, docs) {\r\n    var count = 0;\r\n    for (var i = 0; i < docs.length; i++) {\r\n      count += docs[i].points;\r\n    }\r\n    console.log(\"The total of points is: \", count);\r\n  });\r\n};\r\n\r\n//dont work\r\n// export const getUser = userData => dispatch => {\r\n//   axios\r\n//     .get(\"/api/users/:id\", userData)\r\n//     .then(res => console.log(res)) // re-direct to login on successful register\r\n//     .catch(err =>\r\n//       dispatch({\r\n//         type: GET_ERRORS,\r\n//         payload: err.response.data\r\n//       })\r\n//     );\r\n// };\r\n\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  console.log(userData);\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}